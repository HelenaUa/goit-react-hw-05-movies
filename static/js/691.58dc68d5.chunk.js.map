{"version":3,"file":"static/js/691.58dc68d5.chunk.js","mappings":"mNAGaA,EAAcC,EAAAA,GAAAA,GAAH,6EAKXC,GAAaD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,2HAQVG,EAAYH,EAAAA,GAAAA,IAAH,mC,SCXP,SAASI,EAAT,GAAgC,IAARC,EAAO,EAAPA,KAC7BC,GAAWC,EAAAA,EAAAA,MAEjB,OACIF,EAAKG,KAAI,SAAAC,GAAI,OACT,SAACV,EAAD,WACI,UAACE,EAAD,CAAYS,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAACC,KAAKP,GAAnD,WACA,SAACH,EAAD,CAAWW,IAAG,0CAAqCL,EAAKM,aAAeC,IAAKP,EAAKQ,SACjF,wBAAKR,EAAKQ,YAHIR,EAAKE,GADd,GASpB,C,qEChBYO,E,OAAalB,GAAAA,GAAH,qG,6JCAVmB,EAAanB,EAAAA,GAAAA,KAAH,uEAKVoB,EAAcpB,EAAAA,GAAAA,MAAH,kFAKXqB,EAAerB,EAAAA,GAAAA,OAAH,iF,2BCyEzB,EA5Ee,WAAO,IAAD,EAEnB,GAAwBsB,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOjB,EAAP,KAAaoB,EAAb,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAW,UAAGF,EAAaG,IAAI,eAApB,QAA+B,GAE1CC,EAAG,mCACHC,EAAQ,6CARK,SAUJC,EAVI,0EAUnB,WAAsCJ,GAAtC,gGAEuBK,EAAAA,EAAAA,IAAA,UAAaF,EAAb,mBAAgCD,EAAhC,4DAAuFF,IAF9G,OAEMM,EAFN,OAGAV,EAAQU,EAAS9B,KAAK+B,SAHtB,gDAKAC,QAAQC,IAAR,MALA,yDAVmB,wBAqDnB,OAlBAC,EAAAA,EAAAA,YAAU,WACJlC,IAAS,IAGb4B,EAAuBJ,EAExB,GAAE,CAACxB,EAAMwB,KAEVU,EAAAA,EAAAA,YAAU,WACY,KAAhBV,GACFD,EAAgB,CAAC,EAEpB,GAAE,CAACC,EAAYD,KAOd,4BAEI,UAACT,EAAD,CAAYqB,WAjCC,SAACC,GACdA,EAAMC,iBAEc,KAAhBnB,EAAKoB,QAKTV,EAAuBJ,GACvBL,EAAQ,KALJoB,MAAM,oBAMf,EAuBK,WACE,SAACxB,EAAD,CAAayB,KAAK,OACRtB,KAAK,OACLuB,aAAa,MAEbC,YAAY,cACZC,MAAOzB,EACP0B,SA5CG,SAACR,GAChBjB,EAAQiB,EAAMS,cAAcF,MACjC,KA4CO,SAAC3B,EAAD,CAAcwB,KAAK,SAAnB,wBAEF,SAAC,IAAD,WACE,SAACzC,EAAA,EAAD,CAAeC,KAAMA,QAM9B,C","sources":["components/GalleryMovies/GalleryMovies.styled.jsx","components/GalleryMovies/GalleryMovies.jsx","pages/Home/Home.styled.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledMovie = styled.li`\nwidth: 240px;\ndisplay:flex;\nflex-direction: column;`\n\nexport const StyledLink = styled(Link)`\ntext-decoration: none;\ndisplay:block;\ncolor:black;\n    :hover {\n        color:orangered;\n    }`\n\nexport const StyledImg = styled.img`\nwidth:100%;`","import { useLocation } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport { StyledMovie, StyledLink, StyledImg } from \"./GalleryMovies.styled\";\n\n\nexport default function GalleryMovies({data}) {\n    const location = useLocation();\n\n    return (\n        data.map(item => (\n            <StyledMovie key={item.id}>\n                <StyledLink to={`/movies/${item.id}`} state={{from:location}}>\n                <StyledImg src={`https://image.tmdb.org/t/p/w500/${item.poster_path}`} alt={item.title}/>\n                <h4>{item.title}</h4>\n                </StyledLink>\n            </StyledMovie>\n))\n    )\n};\n\nGalleryMovies.propTypes = {\n    data: PropTypes.array,\n};","import styled from 'styled-components';\n\nexport const ListStyled = styled.ul`\npadding: 25px;\ndisplay: flex;\nflex-wrap: wrap;\ngap:10px;\nlist-style: none;`","import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  gap: 5px;\n  padding: 15px;`\n\nexport const StyledInput = styled.input`\n//   width: 300px;\n//   height: 26px;\n  font-size: 14px;`  \n\nexport const StyledButton = styled.button`\n//   width: 60px;\n//   height: 30px;\n  font-size: 14px;`","// import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { StyledForm, StyledInput, StyledButton } from './Movies.styled';\nimport GalleryMovies from \"components/GalleryMovies/GalleryMovies\";\nimport { ListStyled } from \"../Home/Home.styled\";\n\n\nconst Movies = () => {\n  \n  const [name, setName] = useState('');\n  const [data, setData] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const productName = searchParams.get(\"name\") ?? \"\";\n\n  const KEY = `faab19b092cac6c59a97dec233a38f4d`;\n  const BASE_URL = `https://api.themoviedb.org/3/search/movie?`;\n\n  async function fetchMovieSearchByName(productName) {\n  try {\n  const response = await axios.get(`${BASE_URL}api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${productName}`)\n  setData(response.data.results)\n  } catch (error) {\n  console.log(error);\n  }\n  };\n\n  const handleChange = (event) => {\n        setName(event.currentTarget.value)\n  };\n  \n  const formSubmit = (event) => {\n        event.preventDefault();\n\n        if (name.trim() === '') {\n            alert('Please enter name');\n            return;\n        };\n\n        fetchMovieSearchByName(productName);\n        setName('');\n  };\n  \n  useEffect(() => {\n    if (data === []) {\n      return;\n    }\n    fetchMovieSearchByName(productName);\n     // eslint-disable-next-line\n  }, [data, productName]);\n  \n  useEffect(() => {\n    if (productName === '') {\n      setSearchParams({})\n    }\n  }, [productName,setSearchParams]);\n\n  // useEffect(() => {\n  // HTTP запрос, если нужно\n  // }, [])\n\n  return (\n    <div> \n      \n        <StyledForm formSubmit={formSubmit}>\n          <StyledInput type=\"text\"\n                    name=\"name\"\n                    autocomplete=\"off\"\n                    // autofocus\n                    placeholder=\"Search name\"\n                    value={name}\n                    onChange={handleChange}\n          />\n          <StyledButton type=\"submit\">Search</StyledButton>\n        </StyledForm>\n        <ListStyled>\n          <GalleryMovies data={data}/>\n        </ListStyled>\n      \n    </div>\n    \n  );\n};\n\nexport default Movies;"],"names":["StyledMovie","styled","StyledLink","Link","StyledImg","GalleryMovies","data","location","useLocation","map","item","to","id","state","from","src","poster_path","alt","title","ListStyled","StyledForm","StyledInput","StyledButton","useState","name","setName","setData","useSearchParams","searchParams","setSearchParams","productName","get","KEY","BASE_URL","fetchMovieSearchByName","axios","response","results","console","log","useEffect","formSubmit","event","preventDefault","trim","alert","type","autocomplete","placeholder","value","onChange","currentTarget"],"sourceRoot":""}